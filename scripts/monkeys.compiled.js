// Generated by CoffeeScript 1.6.3
var $, max, min, monkeysButtonEl, monkeysGo, monkeysStop, monkeysTextEl, movePurposeButton, purposeButtonContainerEl, purposeButtonEl, resetPurposeButton;

$ = document.querySelector.bind(document);

max = Math.max.bind(Math);

min = Math.min.bind(Math);

purposeButtonContainerEl = null;

purposeButtonEl = null;

monkeysButtonEl = null;

monkeysTextEl = null;

monkeysGo = function() {
  monkeysButtonEl.removeEventListener("click", monkeysGo, false);
  monkeysTextEl.style.display = "block";
  monkeysButtonEl.innerHTML = "Click here to stop the monkeys";
  return monkeysButtonEl.addEventListener("click", monkeysStop, false);
};

monkeysStop = function() {
  monkeysButtonEl.removeEventListener("click", monkeysStop, false);
  monkeysTextEl.style.display = "none";
  monkeysButtonEl.innerHTML = "Click here to reveal monkeys";
  return monkeysButtonEl.addEventListener("click", monkeysGo, false);
};

movePurposeButton = function(event) {
  var elBounds, escapeVector, getEncroachingVector, getEscapeVector, getMaxEscapeDistances, mousePos, newLeft, newTop, oldLeft, oldTop;
  getMaxEscapeDistances = function(elBounds) {
    var dir, result, v, windowBounds;
    windowBounds = {
      top: 0,
      left: 0,
      bottom: window.innerHeight,
      right: window.innerWidth
    };
    result = {};
    for (dir in windowBounds) {
      v = windowBounds[dir];
      result[dir] = v - elBounds[dir];
    }
    return result;
  };
  getEncroachingVector = function(elBounds, mousePos) {
    var center;
    center = {
      x: elBounds.left + (elBounds.right - elBounds.left) / 2,
      y: elBounds.top + (elBounds.bottom - elBounds.top) / 2
    };
    return {
      x: mousePos.x < center.x ? max(0, mousePos.x - elBounds.left) : min(0, mousePos.x - elBounds.right),
      y: mousePos.y < center.y ? max(0, mousePos.y - elBounds.top) : min(0, mousePos.y - elBounds.bottom)
    };
  };
  getEscapeVector = function(maxEscapeDistances, encroachingVector) {
    return {
      x: encroachingVector.x > 0 ? min(maxEscapeDistances.right, encroachingVector.x) : max(maxEscapeDistances.left, encroachingVector.x),
      y: encroachingVector.y > 0 ? min(maxEscapeDistances.bottom, encroachingVector.y) : max(maxEscapeDistances.top, encroachingVector.y)
    };
  };
  elBounds = purposeButtonContainerEl.getBoundingClientRect();
  mousePos = {
    x: event.clientX,
    y: event.clientY
  };
  escapeVector = getEscapeVector(getMaxEscapeDistances(elBounds), getEncroachingVector(elBounds, mousePos));
  oldLeft = (parseInt(purposeButtonContainerEl.style.left)) || 0;
  newLeft = "" + (oldLeft + escapeVector.x) + "px";
  oldTop = (parseInt(purposeButtonContainerEl.style.top)) || 0;
  newTop = "" + (oldTop + escapeVector.y) + "px";
  purposeButtonContainerEl.style.left = newLeft;
  return purposeButtonContainerEl.style.top = newTop;
};

resetPurposeButton = function() {
  purposeButtonContainerEl.style.left = "0px";
  purposeButtonContainerEl.style.top = "0px";
  return monkeysGo();
};

document.addEventListener('DOMContentLoaded', (function() {
  purposeButtonContainerEl = $('.purpose-button-container');
  purposeButtonEl = $('.purpose-button');
  monkeysButtonEl = $('.monkeys-button');
  monkeysTextEl = $('.monkeys-text');
  monkeysButtonEl.addEventListener("click", monkeysGo, false);
  purposeButtonEl.addEventListener("click", resetPurposeButton, false);
  return purposeButtonContainerEl.addEventListener("mousemove", movePurposeButton, false);
}), false);
